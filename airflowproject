import requests
import xmltodict
import os
from airflow.decorators import dag, task
from airflow.providers.sqlite.operators.sqlite import SqliteOperator
from airflow.providers.sqlite.hooks.sqlite import  SqliteHook

@dag(
    dag_id='podcast_summery2',
    schedule_interval= '@daily',
    start_date=pendulum.datetime(2024,7,19),
    catchup=False
)

def podcast_summery2():


    create_database = SqliteOperator(
        task_id = "create_table",
        sql=r"""
    CREATE TABLE IF NOT EXISTS (
        link TEXT PRIMARY KEY
        title TEXT
        filename TEXT 
        description TEXT
        
    )
    """,
    sqlite_conn_id= "podcasts"

)

    @task()
    def get_episodes():
        data = requests.get("https://marketplace.org/feed/podcast/marketplace")
        feed = xmltodict.parse(data.text)
        episodes = feed["rss"]["channel"]["item"]
        print(f"Located {len(episodes)} episodes.")
        return episodes


    podcast_episodes = get_episodes()
    create_database.set_downstream(podcast_episodes)

@task()
def load_episodes(episodes):
    hook = SqliteHook(sqlite_conn_id = "podcasts")
    stored = hook.get_pandas_df("SELECT * from episodes")
    new_episodes=[]
    for episode in episodes:
        if episode in ["link"] not in stored["link"].values:
            filename=f"{episode['link'].split('/')[-1]}.mp3"
            new_episodes.append([episode["link"], episode["title"], episode["pubDate"], episode["description"],filename])
    hook_insert_rows(table="episodes", rows=new_episodes, target_feilds = ["link","title", "publisher", "desription" , "filename"])

load_episodes(podcast_episodes)

@task()
def download_episodes(episodes):
    for episodes in episodes:
        filename=f"{episode['link'].split('/')[-1]}.mp3"
        audio_folder=os.path.join("episodes", filename)
        if not os.path.exists(audio_folder):
            print(f"dowload {filename}")
            audio=requests.get(episode["enclosure"]["url"])
            with open(audio_path,"wb+") as f:
                f.write(audio.content)



    download_episodes(podcast_episodes)


summery= podcast_summery2()


